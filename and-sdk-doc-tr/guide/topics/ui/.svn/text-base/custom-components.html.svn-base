<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
































































<html xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<link rel="shortcut icon" type="image/x-icon" href="../../../favicon.ico" />
<title>Building Custom Components | Android Developers</title>
<link href="../../../assets/android-developer-docs-devguide.css" rel="stylesheet" type="text/css" />
<script src="../../../assets/search_autocomplete.js" type="text/javascript"></script>
<script src="../../../assets/jquery-resizable.min.js" type="text/javascript"></script>
<script src="../../../assets/android-developer-docs.js" type="text/javascript"></script>
<script type="text/javascript">
  setToRoot("../../../");
</script>
<noscript>
  <style type="text/css">
    html,body{overflow:auto;}
    #body-content{position:relative; top:0;}
    #doc-content{overflow:visible;border-left:3px solid #666;}
    #side-nav{padding:0;}
    #side-nav .toggle-list ul {display:block;}
    #resize-packages-nav{border-bottom:3px solid #666;}
  </style>
</noscript>
</head>

<body class="gc-documentation">

  <div id="header">
      <div id="headerLeft">
          <a href="../../../index.html" tabindex="-1"><img
              src="../../../assets/images/bg_logo.png" alt="Android Developers" /></a>
          <ul id="header-tabs" class="guide">
    
	<li id="home-link"><a href="../../../offline.html">
	
		<span class="en">Home</span>
		<span style="display:none" class="de">Startseite</span>
		<span style="display:none" class="es"></span>
		<span style="display:none" class="fr"></span>
		<span style="display:none" class="it"></span>
    <span style="display:none" class="ja">ホーム</span>
		<span style="display:none" class="zh-CN">主页</span>
		<span style="display:none" class="zh-TW">首頁</span>
	
	</a></li>
	<li id="sdk-link"><a href="../../../sdk/index.html">
		<span class="en">SDK</span>
	</a></li>
	<li id="guide-link"><a href="../../../guide/index.html" onClick="return loadLast('guide')">
	
		<span class="en">Dev Guide</span>
		<span style="display:none" class="de">Handbuch</span>
		<span style="display:none" class="es">Guía</span>
		<span style="display:none" class="fr">Guide</span>
		<span style="display:none" class="it">Guida</span>
    <span style="display:none" class="ja">開発ガイド</span>
		<span style="display:none" class="zh-CN">开发人员指南</span>
		<span style="display:none" class="zh-TW">開發指南</span>
	
	</a></li>
	<li id="reference-link"><a href="../../../reference/packages.html" onClick="return loadLast('reference')">
	
		<span class="en">Reference</span>
		<span style="display:none" class="de">Referenz</span>
		<span style="display:none" class="es">Referencia</span>
		<span style="display:none" class="fr">Référence</span>
		<span style="display:none" class="it">Riferimento</span>
    <span style="display:none" class="ja">リファレンス</span>
		<span style="display:none" class="zh-CN">参考</span>
		<span style="display:none" class="zh-TW">參考資料</span>
	
	</a></li>
	<li><a href="http://android-developers.blogspot.com" onClick="return requestAppendHL(this.href)">
	
		<span class="en">Blog</span>
		<span style="display:none" class="de"></span>
		<span style="display:none" class="es"></span>
		<span style="display:none" class="fr"></span>
		<span style="display:none" class="it"></span>
    <span style="display:none" class="ja">ブログ</span>
		<span style="display:none" class="zh-CN">博客</span>
		<span style="display:none" class="zh-TW">網誌</span>
	
	</a></li>
	<li id="videos-link"><a href="../../../videos/index.html" onClick="return loadLast('videos')">
	
		<span class="en">Videos</span>
		<span style="display:none" class="de"></span>
		<span style="display:none" class="es"></span>
		<span style="display:none" class="fr"></span>
		<span style="display:none" class="it"></span>
    <span style="display:none" class="ja">ビデオ</span>
		<span style="display:none" class="zh-CN"></span>
		<span style="display:none" class="zh-TW"></span>
	
	</a></li>
	<li id="community-link"><a href="../../../community/index.html">
	
		<span class="en">Community</span>
		<span style="display:none" class="de"></span>
		<span style="display:none" class="es">Comunidad</span>
		<span style="display:none" class="fr">Communauté</span>
		<span style="display:none" class="it"></span>
    <span style="display:none" class="ja">コミュニティ</span>
		<span style="display:none" class="zh-CN">社区</span>
		<span style="display:none" class="zh-TW">社群</span>
	
	</a></li>
     
</ul>
     
      </div>
      <div id="headerRight">
          <div id="headerLinks">
          
          <a href="http://www.android.com">Android.com</a>
          </div>
  <div id="search" >
      <div id="searchForm">
          <form accept-charset="utf-8" class="gsc-search-box" 
                onsubmit="return submit_search()">
            <table class="gsc-search-box" cellpadding="0" cellspacing="0"><tbody>
                <tr>
                  <td class="gsc-input">
                    <input id="search_autocomplete" class="gsc-input" type="text" size="33" autocomplete="off"
                      title="search developer docs" name="q"
                      value="search developer docs"
                      onFocus="search_focus_changed(this, true)"
                      onBlur="search_focus_changed(this, false)"
                      onkeydown="return search_changed(event, true, '../../../')"
                      onkeyup="return search_changed(event, false, '../../../')" />
                  <div id="search_filtered_div" class="no-display">
                      <table id="search_filtered" cellspacing=0>
                      </table>
                  </div>
                  </td>
                  <td class="gsc-search-button">
                    <input type="submit" value="Search" title="search" id="search-button" class="gsc-search-button" />
                  </td>
                  <td class="gsc-clear-button">
                    <div title="clear results" class="gsc-clear-button">&nbsp;</div>
                  </td>
                </tr></tbody>
              </table>
          </form>
      </div><!-- searchForm -->
  </div><!-- search -->
      </div><!-- headerRight -->
      <script type="text/javascript">
        <!--  
        changeTabLang(getLangPref());
        //-->
      </script>
  </div><!-- header -->

  <div class="g-section g-tpl-240" id="body-content">
    <div class="g-unit g-first side-nav-resizable" id="side-nav">
      <div id="devdoc-nav">
<ul>

  <li>
    <h2><span class="en">Android Basics</span>
        <span class="de" style="display:none">Einführung in Android</span>
        <span class="es" style="display:none">Información básica sobre Android</span>
        <span class="fr" style="display:none">Présentation d'Android</span>
        <span class="it" style="display:none">Nozioni di base su Android</span>
        <span class="ja" style="display:none">Android の基本</span>
        <span class="zh-CN" style="display:none">Android 基础知识</span>
        <span class="zh-TW" style="display:none">Android 簡介</span>
    </h2>
    <ul>
      <li><a href="../../../guide/basics/what-is-android.html">
        <span class="en">What Is Android?</span>
        <span class="de" style="display:none">Was ist Android?</span>
        <span class="es" style="display:none">¿Qué es Android?</span>
        <span class="fr" style="display:none">Qu'est-ce qu'Android&nbsp;?</span>
        <span class="it" style="display:none">Che cos'è Android?</span>
        <span class="ja" style="display:none">Android とは</span>
        <span class="zh-CN" style="display:none">Android 是什么？</span>
        <span class="zh-TW" style="display:none">什麼是 Android？</span>
          </a></li>

  <!--  <li><a style="color:gray;">The Android SDK</a></li> -->
  <!--  <li><a style="color:gray;">Walkthrough for Developers</a></li> -->
      <!-- quick overview of what it's like to develop on Android -->
    </ul>
  </li>
  
  <li>
    <h2>
      <span class="en">Framework Topics</span>
      <span class="de" style="display:none">Framework-Themen</span>
      <span class="es" style="display:none">Temas sobre el framework</span>
      <span class="fr" style="display:none">Thèmes relatifs au framework</span>
      <span class="it" style="display:none">Argomenti relativi al framework</span>
      <span class="ja" style="display:none">フレームワーク トピック</span>
      <span class="zh-CN" style="display:none">框架主题</span>
      <span class="zh-TW" style="display:none">架構主題</span>
    </h2>
    <ul>
      <li><a href="../../../guide/topics/fundamentals.html">
            <span class="en">Application Fundamentals</span>
            <span class="de" style="display:none">Anwendungsgrundlagen</span>
            <span class="es" style="display:none">Fundamentos de las aplicaciones</span>
            <span class="fr" style="display:none">Principes de base des applications</span>
            <span class="it" style="display:none">Concetti fondamentali sulle applicazioni</span>
            <span class="ja" style="display:none">開発の基礎</span>
            <span class="zh-CN" style="display:none">应用程序基础</span>
            <span class="zh-TW" style="display:none">應用程式基本原理</span>

          </a></li>
    </ul>
    <ul>
      <li class="toggle-list">
        <div><a href="../../../guide/topics/ui/index.html">
               <span class="en">User Interface</span>
             </a></div>
        <ul>
          <li><a href="../../../guide/topics/ui/declaring-layout.html">
               <span class="en">Declaring Layout</span> 
              </a></li>
          <li><a href="../../../guide/topics/ui/menus.html">
               <span class="en">Creating Menus</span> 
              </a></li>
          <li><a href="../../../guide/topics/ui/dialogs.html">
                <span class="en">Creating Dialogs</span> 
              </a></li>
          <li><a href="../../../guide/topics/ui/ui-events.html">
                <span class="en">Handling UI Events</span> 
              </a></li>
          <li><a href="../../../guide/topics/ui/notifiers/index.html">
                <span class="en">Notifying the User</span> 
              </a></li>
          <li><a href="../../../guide/topics/ui/themes.html">
                <span class="en">Applying Styles and Themes</span> 
              </a></li>
          <li><a href="../../../guide/topics/ui/custom-components.html">
                <span class="en">Building Custom Components</span> 
              </a></li>
          <li><a href="../../../guide/topics/ui/binding.html">
                <span class="en">Binding to Data with AdapterView</span> 
              </a></li>
          <li><a href="../../../guide/topics/ui/layout-objects.html">
                <span class="en">Common Layout Objects</span> 
              </a></li>
          <li><a href="../../../guide/topics/ui/how-android-draws.html">
                <span class="en">How Android Draws Views</span> 
              </a></li>
        </ul>
      </li>
      <li class="toggle-list">
        <div><a href="../../../guide/topics/resources/index.html">
               <span class="en">Resources and Assets</span> 
             </a></div>
        <ul>
          <li><a href="../../../guide/topics/resources/resources-i18n.html">
                <span class="en">Resources and I18n</span>
              </a></li>
          <li><a href="../../../guide/topics/resources/available-resources.html">
                <span class="en">Available Resource Types</span>
              </a></li>
          <li><a href="../../../guide/topics/resources/localization.html">
                <span class="en">Localization</span>
              </a></li>
        </ul>
      </li>
      <li><a href="../../../guide/topics/intents/intents-filters.html">
            <span class="en">Intents and Intent Filters</span>
          </a></li>
      <li><a href="../../../guide/topics/data/data-storage.html">
            <span class="en">Data Storage</span>
          </a></li>
      <li><a href="../../../guide/topics/providers/content-providers.html">
            <span class="en">Content Providers</span>
          </a></li>
      <li><a href="../../../guide/topics/security/security.html">
            <span class="en">Security and Permissions</span>
          </a></li>
  <!--  <li><a style="color:gray;">Processes and Threads</a></li> -->
  <!--  <li><a style="color:gray;">Interprocess Communication</a></li> -->
      <li class="toggle-list">
        <div><a href="../../../guide/topics/manifest/manifest-intro.html">
               <span class="en">The AndroidManifest.xml File</span>
             </a></div>
        <ul>
          <li><a href="../../../guide/topics/manifest/action-element.html">&lt;action&gt;</a></li>
          <li><a href="../../../guide/topics/manifest/activity-element.html">&lt;activity&gt;</a></li>
          <li><a href="../../../guide/topics/manifest/activity-alias-element.html">&lt;activity-alias&gt;</a></li>
          <li><a href="../../../guide/topics/manifest/application-element.html">&lt;application&gt;</a></li>
          <li><a href="../../../guide/topics/manifest/category-element.html">&lt;category&gt;</a></li>
          <li><a href="../../../guide/topics/manifest/data-element.html">&lt;data&gt;</a></li>
          <li><a href="../../../guide/topics/manifest/grant-uri-permission-element.html">&lt;grant-uri-permission&gt;</a></li>
          <li><a href="../../../guide/topics/manifest/instrumentation-element.html">&lt;instrumentation&gt;</a></li>
          <li><a href="../../../guide/topics/manifest/intent-filter-element.html">&lt;intent-filter&gt;</a></li>
          <li><a href="../../../guide/topics/manifest/manifest-element.html">&lt;manifest&gt;</a></li>
          <li><a href="../../../guide/topics/manifest/meta-data-element.html">&lt;meta-data&gt;</a></li>
          <li><a href="../../../guide/topics/manifest/path-permission-element.html">&lt;path-permission&gt;</a></li>
          <li><a href="../../../guide/topics/manifest/permission-element.html">&lt;permission&gt;</a></li>
          <li><a href="../../../guide/topics/manifest/permission-group-element.html">&lt;permission-group&gt;</a></li>
          <li><a href="../../../guide/topics/manifest/permission-tree-element.html">&lt;permission-tree&gt;</a></li>
          <li><a href="../../../guide/topics/manifest/provider-element.html">&lt;provider&gt;</a></li>
          <li><a href="../../../guide/topics/manifest/receiver-element.html">&lt;receiver&gt;</a></li>
          <li><a href="../../../guide/topics/manifest/service-element.html">&lt;service&gt;</a></li>
          <li><a href="../../../guide/topics/manifest/supports-screens-element.html">&lt;supports-screens&gt;</a></li>  <!-- ##api level 4## -->
          <li><a href="../../../guide/topics/manifest/uses-configuration-element.html">&lt;uses-configuration&gt;</a></li>
          <li><a href="../../../guide/topics/manifest/uses-feature-element.html">&lt;uses-feature&gt;</a></li> <!-- ##api level 4## -->
          <li><a href="../../../guide/topics/manifest/uses-library-element.html">&lt;uses-library&gt;</a></li>
          <li><a href="../../../guide/topics/manifest/uses-permission-element.html">&lt;uses-permission&gt;</a></li>
          <li><a href="../../../guide/topics/manifest/uses-sdk-element.html">&lt;uses-sdk&gt;</a></li>
        </ul>
      </li>
    </ul>
    <ul>
      <li class="toggle-list">
        <div><a href="../../../guide/topics/graphics/index.html">
               <span class="en">Graphics</span>
             </a></div>
        <ul>
          <li><a href="../../../guide/topics/graphics/2d-graphics.html">
                <span class="en">2D Graphics</span>
              </a></li>
          <li><a href="../../../guide/topics/graphics/opengl.html">
                <span class="en">3D with OpenGL</span>
              </a></li>
        </ul>
      </li>
      <li><a href="../../../guide/topics/media/index.html">
            <span class="en">Audio and Video</span>
          </a></li>
  <!--<li class="toggle-list">
        <div><a style="color:gray;">Sensors</a></div>
          <ul>
            <li><a style="color:gray;">Camera</a></li>
            <li><a style="color:gray;">Compass</a></li>
            <li><a style="color:gray;">Accelerometer</a></li>
          </ul>
      </li> -->
      <li><a href="../../../guide/topics/location/index.html">
            <span class="en">Location and Maps</span>
          </a></li>
  <!--<li class="toggle-list">
        <div><a style="color:gray;">Wireless Controls</a></div>
          <ul>
            <li><a style="color:gray;">Wi-Fi</a></li>
            <li><a style="color:gray;">Bluetooth</a></li>
          </ul>
      </li> -->
  <!--<li><a style="color:gray;">Localization</a></li>  -->
      <li><a href="../../../guide/topics/appwidgets/index.html">
            <span class="en">App Widgets</span>
          </a></li>
    </ul>
  </li>
  
  <li>
    <h2><span class="en">Developing</span>
               <span class="de" style="display:none">Entwicklung</span>
               <span class="es" style="display:none">Desarrollo</span>
               <span class="fr" style="display:none">Développement</span>
               <span class="it" style="display:none">Sviluppo</span>
               <span class="ja" style="display:none">開発</span>
               <span class="zh-CN" style="display:none">开发</span>
               <span class="zh-TW" style="display:none">開發</span>
    </h2>
    <ul>
  <!--<li><a href="">Developing for Android</a></li>
      signing, upgrading, selecting a package name, select device profile, touch, trackball, dpad available, etc. -->
      <li><a href="../../../guide/developing/eclipse-adt.html">
            <span class="en">In Eclipse, with ADT</span> 
            <span class="de" style="display:none">In Eclipse, mit ADT</span>
            <span class="es" style="display:none">En Eclipse, con ADT</span>
            <span class="fr" style="display:none">Sous Eclipse, à l'aide du plugin ADT</span>
            <span class="it" style="display:none">In Eclipse, con ADT</span>
            <span class="ja" style="display:none">Eclipse 内で ADT を使用</span>
            <span class="zh-CN" style="display:none">利用 ADT 在 Eclipse 中开发</span>
            <span class="zh-TW" style="display:none">在加裝 ADT 工具的 Eclipse 環境中</span>
          </a></li>
      <li><a href="../../../guide/developing/other-ide.html">
            <span class="en">In Other IDEs</span>
            <span class="de" style="display:none">In anderen IDEs</span>
            <span class="es" style="display:none">En otros entornos</span>
            <span class="fr" style="display:none">Sous d'autres environnements</span>
            <span class="it" style="display:none">In altri IDE</span>
            <span class="ja" style="display:none">その他の統合開発環境</span>
            <span class="zh-CN" style="display:none">在其他 IDE 中开发</span>
            <span class="zh-TW" style="display:none">在其他開發環境中</span>
          </a></li>
      <li><a href="../../../guide/developing/device.html">
            <span class="en">On a Device</span>
          </a></li>
      <li><a href="../../../guide/developing/debug-tasks.html">
            <span class="en">Debugging Tasks</span>
          </a></li>
      <li class="toggle-list">
        <div><a href="../../../guide/developing/tools/index.html">
            <span class="en">Tools</span>
          </a></div>
        <ul>
      		<li><a href="../../../guide/developing/tools/aapt.html">aapt</a></li>
      		<li><a href="../../../guide/developing/tools/adb.html">adb</a></li>
      		<li><a href="../../../guide/developing/tools/othertools.html#android">android</a></li>
      <!--<li><a href="../../../guide/developing/tools/adt.html">ADT Plugin</a></li>-->
      		<li><a href="../../../guide/developing/tools/aidl.html">aidl</a></li>
      		<li><a href="../../../guide/developing/tools/avd.html">AVDs</a></li>
      		<li><a href="../../../guide/developing/tools/ddms.html">ddms</a></li>
      		<li><a href="../../../guide/developing/tools/othertools.html#dx">dx</a></li>
      		<li><a href="../../../guide/developing/tools/draw9patch.html">Draw 9-Patch</a></li>
      		<li><a href="../../../guide/developing/tools/emulator.html">Emulator</a></li>
      		<li><a href="../../../guide/developing/tools/hierarchy-viewer.html">Hierarchy Viewer</a></li>
      		<li><a href="../../../guide/developing/tools/layoutopt.html">layoutopt</a></li>
      		<li><a href="../../../guide/developing/tools/othertools.html#mksdcard">mksdcard</a></li>
      		<li><a href="../../../guide/developing/tools/monkey.html">Monkey</a></li>
      		<li><a href="../../../guide/developing/tools/adb.html#sqlite">sqlite3</a></li>
      		<li><a href="../../../guide/developing/tools/traceview.html" >Traceview</a></li>
      		<li><a href="../../../guide/developing/tools/zipalign.html" >zipalign</a></li>
    	  </ul>
  	  </li>
  <!--<li><a href="../../../guide/developing/instrumentation/index.html">Instrumentation</a></li>
      <li><a style="color:gray;">JUnit</a></li> -->
    </ul>
  </li>
  
  <li>
    <h2><span class="en">Publishing</span>
        <span class="de" style="display:none">Veröffentlichung</span>
        <span class="es" style="display:none">Publicación</span>
        <span class="fr" style="display:none">Publication</span>
        <span class="it" style="display:none">Pubblicazione</span>
        <span class="ja" style="display:none">公開</span>
        <span class="zh-CN" style="display:none">发布</span>
        <span class="zh-TW" style="display:none">發佈</span>
    </h2>
    <ul>
      <li><a href="../../../guide/publishing/app-signing.html">
            <span class="en">Signing Your Applications</span>
            <span class="de" style="display:none">Signieren Ihrer Anwendungen</span>
            <span class="es" style="display:none">Firma de aplicaciones</span>
            <span class="fr" style="display:none">Attribution de votre signature <br />à vos applications</span>
            <span class="it" style="display:none">Firma delle applicazioni</span>
            <span class="ja" style="display:none">アプリケーションへの署名</span>
            <span class="zh-CN" style="display:none">应用程序签名</span>
            <span class="zh-TW" style="display:none">簽署應用程式</span>
          </a></li>
      <li><a href="../../../guide/publishing/versioning.html">
            <span class="en">Versioning Your Applications</span>
            <span class="de" style="display:none">Versionsverwaltung für Ihre <br />Anwendungen</span>
            <span class="es" style="display:none">Versiones de las aplicaciones</span>
            <span class="fr" style="display:none">Attribution d'une version à vos applications</span>
            <span class="it" style="display:none">Controllo versioni delle applicazioni</span>
            <span class="ja" style="display:none">アプリケーションのバージョニング</span>
            <span class="zh-CN" style="display:none">应用程序版本控制</span>
            <span class="zh-TW" style="display:none">應用程式版本設定</span>
          </a></li>
      <li><a href="../../../guide/publishing/preparing.html">
            <span class="en">Preparing to Publish</span>
            <span class="de" style="display:none">Vorbereitung auf die Veröffentlichung</span>
            <span class="es" style="display:none">Publicación de aplicaciones</span>
            <span class="fr" style="display:none">Préparation à la publication</span>
            <span class="it" style="display:none">Preparativi per la pubblicazione</span>
            <span class="ja" style="display:none">公開の準備</span>
            <span class="zh-CN" style="display:none">准备发布</span>
            <span class="zh-TW" style="display:none">準備發佈</span>
          </a></li>
      <li><a href="../../../guide/publishing/publishing.html">
            <span class="en">Publishing Your Applications</span>
          </a></li>
    </ul>
  </li>
  
  <li>
    <h2><span class="en">Best Practices</span>
               <span class="de" style="display:none">Bewährte Verfahren</span>
               <span class="es" style="display:none">Prácticas recomendadas</span>
               <span class="fr" style="display:none">Meilleures pratiques</span>
               <span class="it" style="display:none">Best practice</span>
               <span class="ja" style="display:none">ベスト プラクティス</span>
               <span class="zh-CN" style="display:none">最佳实践</span>
               <span class="zh-TW" style="display:none">最佳實務</span>
    </h2>
    <ul>
      <li><a href="../../../guide/practices/screens_support.html">
            <span class="en">Supporting Multiple Screens</span>
          </a></li>
      <li class="toggle-list">
        <div><a href="../../../guide/practices/ui_guidelines/index.html">
               <span class="en">UI Guidelines</span>
             </a></div>
        <ul>
          <li><a href="../../../guide/practices/ui_guidelines/icon_design.html">
                <span class="en">Icon Design</span>
              </a></li>
          <li><a href="../../../guide/practices/ui_guidelines/widget_design.html">
                <span class="en">App Widget Design</span>
              </a></li>
          <li><a href="../../../guide/practices/ui_guidelines/activity_task_design.html">
                <span class="en">Activity and Task Design</span>
              </a></li>
          <li><a href="../../../guide/practices/ui_guidelines/menu_design.html">
                <span class="en">Menu Design</span>
              </a></li>
        </ul>
      </li>
      </ul>
      <ul>
      <li><a href="../../../guide/practices/design/performance.html">
            <span class="en">Designing for Performance</span>
          </a></li>
      <li><a href="../../../guide/practices/design/responsiveness.html">
            <span class="en">Designing for Responsiveness</span>
          </a></li>
      <li><a href="../../../guide/practices/design/seamlessness.html">
            <span class="en">Designing for Seamlessness</span>
          </a></li>
    </ul>
  </li>
  
  <li>
    <h2><span class="en">Tutorials and Sample Code</span>
               <span class="de" style="display:none">Lernprogramme und Beispielcode</span>
               <span class="es" style="display:none">Tutoriales y código de ejemplo</span>
               <span class="fr" style="display:none">Didacticiels et exemple de code</span>
               <span class="it" style="display:none">Esercitazioni e codice di esempio</span>
               <span class="ja" style="display:none">チュートリアルとサンプル コード</span>
               <span class="zh-CN" style="display:none">辅导手册和示例代码</span>
               <span class="zh-TW" style="display:none">教學課程與程式碼範例</span>
    </h2>
    <ul>
      <li><a href="../../../guide/tutorials/hello-world.html">
            <span class="en">Hello World</span>
          </a></li>
      <li><a href="../../../guide/tutorials/views/index.html">
            <span class="en">Hello Views</span>
          </a></li>
      <li><a href="../../../guide/tutorials/localization/index.html">
            <span class="en">Hello Localization</span>
          </a></li>
      <li><a href="../../../guide/tutorials/notepad/index.html">
            <span class="en">Notepad Tutorial</span>
          </a></li>
    </ul>
    <ul>
      <li class="toggle-list">
        <div><a href="../../../guide/samples/index.html">
               <span class="en">Sample Code</span>
             </a></div>
        <ul>
          <li><a href="../../../guide/samples/ApiDemos/index.html">
                <span class="en">API Demos</span>
              </a></li>
          <li><a href="../../../guide/samples/Home/index.html">
                <span class="en">Home</span>
              </a></li>
          <li><a href="../../../guide/samples/JetBoy/index.html">
                <span class="en">JetBoy</span>
              </a></li>
          <li><a href="../../../guide/samples/LunarLander/index.html">
                <span class="en">Lunar Lander</span>
              </a></li>
          <li><a href="../../../guide/samples/NotePad/index.html">
                <span class="en">Note Pad</span>
              </a></li>
          <li><a href="../../../guide/samples/SearchableDictionary/index.html">
                <span class="en">Searchable Dictionary</span>
              </a></li>
          <li><a href="../../../guide/samples/Snake/index.html">
                <span class="en">Snake</span>
              </a></li>
          <li><a href="../../../guide/samples/SoftKeyboard/index.html">
                <span class="en">Soft Keyboard</span>
              </a></li>
        </ul>
      </li>
    </ul>
  </li>
  

  <li>
    <h2><span class="en">Appendix</span>
               <span class="de" style="display:none">Anhang</span>
               <span class="es" style="display:none">Apéndice</span>
               <span class="fr" style="display:none">Annexes</span>
               <span class="it" style="display:none">Appendice</span>
               <span class="ja" style="display:none">付録</span>
               <span class="zh-CN" style="display:none">附录</span>
               <span class="zh-TW" style="display:none">附錄</span>
    </h2>
    <ul>
      <li><a href="../../../guide/appendix/api-levels.html">
            <span class="en">Android API Levels</span>
          </a></li>
      <li><a href="../../../guide/appendix/media-formats.html">
            <span class="en">Supported Media Formats</span>
          </a></li>
      <li><a href="../../../guide/appendix/g-app-intents.html">
            <span class="en">Intents List: Google Apps</span>
          </a></li>
      <li><a href="../../../guide/appendix/glossary.html">
            <span class="en">Glossary</span>
          </a></li>
      <li><a href="../../../guide/appendix/faq/index.html">
            <span class="en">FAQ</span>
          </a></li>
    </ul>
  </li>

</ul>

<script type="text/javascript">
<!--
    buildToggleLists();
    changeNavLang(getLangPref());
//-->
</script>

      </div>
    </div> <!-- end side-nav -->
    <script>
      addLoadEvent(function() {
        scrollIntoView("devdoc-nav");
        });
    </script>




<div class="g-unit" id="doc-content"><a name="top"></a>

<div id="jd-header" class="guide-header">
  <span class="crumb">
    
      <a href="index.html">User Interface</a> >
    
  </span>
<h1>Building Custom Components</h1>
</div>

  <div id="jd-content">


    <div class="jd-descr">
    <div id="qv-wrapper">
<div id="qv">
  <h2>In this document</h2>
  <ol>
    <li><a href="#basic">The Basic Approach</a></li>
    <li><a href="#custom">Fully Customized Components</a></li>
    <li><a href="#compound">Compound Controls</a></li>
    <li><a href="#modifying">Modifying an Existing View Type</a></li>
  </ol>
</div>
</div>

<p>Android offers a sophisticated and powerful componentized model for building your UI, 
based on the fundamental layout classes: <code><a href="../../../reference/android/view/View.html">View</a></code> and 
<code><a href="../../../reference/android/view/ViewGroup.html">ViewGroup</a></code>. To start with, the platform includes a variety of prebuilt 
View and ViewGroup subclasses &mdash; called widgets and layouts, respectively &mdash; 
that you can use to construct your UI.</p>

<p>A partial list of available widgets includes <code><a href="../../../reference/android/widget/Button.html">Button</a></code>, 
<code><a href="../../../reference/android/widget/TextView.html">TextView</a></code>, 
<code><a href="../../../reference/android/widget/EditText.html">EditText</a></code>, 
<code><a href="../../../reference/android/widget/ListView.html">ListView</a></code>,
<code><a href="../../../reference/android/widget/CheckBox.html">CheckBox</a></code>, 
<code><a href="../../../reference/android/widget/RadioButton.html">RadioButton</a></code>, 
<code><a href="../../../reference/android/widget/Gallery.html">Gallery</a></code>, 
<code><a href="../../../reference/android/widget/Spinner.html">Spinner</a></code>, and the more special-purpose 
<code><a href="../../../reference/android/widget/AutoCompleteTextView.html">AutoCompleteTextView</a></code>, 
<code><a href="../../../reference/android/widget/ImageSwitcher.html">ImageSwitcher</a></code>, and
<code><a href="../../../reference/android/widget/TextSwitcher.html">TextSwitcher</a></code>. </p>

<p>Among the layouts available are <code><a href="../../../reference/android/widget/LinearLayout.html">LinearLayout</a></code>, 
<code><a href="../../../reference/android/widget/FrameLayout.html">FrameLayout</a></code>, <code><a href="../../../reference/android/widget/RelativeLayout.html">RelativeLayout</a></code>, 
and others. For more examples, see <a href="layout-objects.html">Common Layout Objects</a>.</p>

<p>If none of the prebuilt widgets or layouts meets your needs, you can create your own View subclass. 
If you only need to make small adjustments to an existing widget or layout, you can simply subclass 
the widget or layout and override its methods.
</p>

<p>Creating your own View subclasses gives you precise control over the appearance and function 
of a screen element. To give an idea of the control you get with custom views, here are some 
examples of what you could do with them:</p>
 
<ul>
  <li>
    You could create a completely custom-rendered View type, for example a "volume
    control" knob rendered using 2D graphics, and which resembles an
    analog electronic control.
  </li>
  <li>
    You could combine a group of View components into a new single component, perhaps
    to make something like a ComboBox (a combination of popup list and free
    entry text field), a dual-pane selector control (a left and right pane
    with a list in each where you can re-assign which item is in which
    list), and so on.
  </li>
  <li>
    You could override the way that an EditText component is rendered on the screen
    (the <a href="../../../guide/samples/NotePad/index.html">Notepad Tutorial</a> uses this to good effect, 
    to create a lined-notepad page).
  </li>
  <li>
    You could capture other events like key presses and handle them in some custom
    way (such as for a game).
  </li>
</ul>
<p>
The sections below explain how to create custom Views and use them in your application. 
For detailed reference information, see the <code><a href="../../../reference/android/view/View.html">View</a></code> class. </p>


<h2 id="basic">The Basic Approach</h2>

<p>Here is a high level overview of what you need to know to get started in creating your own
View components:</p>
 
<ol>
  <li>
    Extend an existing <code><a href="../../../reference/android/view/View.html">View</a></code> class or subclass 
	with your own class.
  </li>
  <li>
    Override some of the methods from the superclass. The superclass methods 
    to override start with '<code>on</code>', for
    example, <code><a href="../../../reference/android/view/View.html#onDraw(android.graphics.Canvas)">onDraw()</a></code>, 
    <code><a href="../../../reference/android/view/View.html#onMeasure(int, int)">onMeasure()</a></code>, and 
    <code><a href="../../../reference/android/view/View.html#onKeyDown(int, android.view.KeyEvent)">onKeyDown()</a></code>.
    This is similar to the <code>on...</code> events in <code><a href="../../../reference/android/app/Activity.html">Activity</a></code> 
    or <code><a href="../../../reference/android/app/ListActivity.html">ListActivity</a></code>
    that you override for lifecycle and other functionality hooks.
  <li>
    Use your new extension class. Once completed, your new extension class 
    can be used in place of the view upon which it was based.
  </li>
</ol>  
<p class="note"><strong>Tip:</strong>
    Extension classes can be defined as inner classes inside the activities
    that use them. This is useful because it controls access to them but
    isn't necessary (perhaps you want to create a new public View for
    wider use in your application).
</p>



<h2 id="custom">Fully Customized Components</h2>
<p>
Fully customized components can be used to create graphical components that
appear however you wish. Perhaps a graphical VU
meter that looks like an old analog gauge, or a sing-a-long text view where
a bouncing ball moves along the words so you can sing along with a karaoke
machine. Either way, you want something that the built-in components just
won't do, no matter how you combine them.</p>
<p>Fortunately, you can easily create components that look and behave in any
way you like, limited perhaps only by your imagination, the size of the
screen, and the available processing power (remember that ultimately your
application might have to run on something with significantly less power
than your desktop workstation).</p>
<p>To create a fully customized component:</p> 
<ol>
  <li>
    The most generic view you can extend is, unsurprisingly, <code><a href="../../../reference/android/view/View.html">View</a></code>, so you will usually start by extending this to
    create your new super component.
  </li>
  <li>
    You can supply a constructor which can
    take attributes and parameters from the XML, and you can also consume
    your own such attributes and parameters (perhaps the color and range of
    the VU meter, or the width and damping of the needle, etc.)
  </li>
  <li>
    You will probably want to create your own event listeners,
    property accessors and modifiers, and possibly more sophisticated
    behavior in your component class as well.
  </li>
  <li>
    You will almost certainly want to override <code>onMeasure()</code> and
    are also likely to need to override <code>onDraw()</code> if you want
    the component to show something. While both have default behavior,
    the default <code>onDraw()</code> will do nothing, and the default
    <code>onMeasure()</code> will always set a size of 100x100 &mdash; which is
    probably not what you want.
  </li>
  <li>
    Other <code>on...</code> methods may also be overridden as required.
  </li>
</ol>

<h3>Extend <code>onDraw()</code> and <code>onMeasure()</code></h3>
<p>The <code>onDraw()</code> method delivers you a <code><a href="../../../reference/android/graphics/Canvas.html">Canvas</a></code>
upon which you can implement anything you want: 2D graphics, other standard or
custom components, styled text, or anything else you can think of.</p>

<p class="note"><strong>Note:</strong>
This does not apply to 3D graphics. If you want to
use 3D graphics, you must extend <code><a href="../../../reference/android/view/SurfaceView.html">SurfaceView</a></code>
instead of View, and draw from a seperate thread. See the
GLSurfaceViewActivity sample
for details.<br>
<strong>注意：</strong><span>继承</span><span lang="EN-US">View</span><span>的方法不能用于</span><span lang="EN-US">3D</span><span>图形。如果您想使用3D图形，您必须继承</span><code><a href="../../../reference/android/view/SurfaceView.html">SurfaceView</a></code><span>，而不是View，然后使用一个单独的线程进行绘制。详细信息请参看</span>GLSurfaceViewActivity<span>例子。</span></p>

<p><code>onMeasure()</code> is a little more involved. <code>onMeasure()</code>
is a critical piece of the rendering contract between your component and its
container. <code>onMeasure()</code> should be overridden to efficiently and
accurately report the measurements of its contained parts. This is made
slightly more complex by the requirements of limits from the parent
(which are passed in to the <code>onMeasure()</code> method) and by the
requirement to call the <code>setMeasuredDimension()</code> method with the
measured width and height once they have been calculated. If you fail to
call this method from an overridden <code>onMeasure()</code> method, the 
result will be an exception at measurement time.<br>
<code>onMeasure()</code>稍微复杂一点。他是组件及其容器之间联系渲染的关键部分。应该重写来完成高效的和精确的报告其承装物的测量情况。父的限制（被传递到<code>onMeasure()</code>方法中）&nbsp;&nbsp; 
和&nbsp;&nbsp; 计算完成后需要调用<code>setMeasuredDimension()</code>并传递测量好的宽和高&nbsp;&nbsp; 
使得这个方法的重写更加复杂一些。如果您没能从重写的<code>onMeasure()</code>方法中调用<code>setMeasuredDimension()</code>，会出现一个测量器异常。</p>
<p>At a high level, implementing <code>onMeasure()</code> looks something 
 like this:<br>
总的来说，实现<code>onMeasure()</code>这样做：</p>
 
<ol>
  <li>
    The overridden <code>onMeasure()</code> method is called with width and
    height measure specifications (<code>widthMeasureSpec</code> and
    <code>heightMeasureSpec</code> parameters, both are integer codes
    representing dimensions) which should be treated as requirements for
    the restrictions on the width and height measurements you should produce. A
    full reference to the kind of restrictions these specifications can require
    can be found in the reference documentation under <code><a href="../../../reference/android/view/View.html#onMeasure(int, int)">View.onMeasure(int, int)</a></code> (this reference
    documentation does a pretty good job of explaining the whole measurement
    operation as well).
  <br>
	调用覆盖的<code>onMeasure()</code>方法，传递宽高测量规格（<code>widthMeasureSpec</code>和<code>heightMeasureSpec</code>参数，代表尺寸的整数），规格可视为您要限定创建的窗口宽和高的要求。规格可以要求的限定的种类可参见<code><a href="../../../reference/android/view/View.html#onMeasure(int, int)">View.onMeasure(int, int)</a></code>下的参考文档（这篇文档也很好的解释了整个测量操作）。</li>
  <li>
    Your component's <code>onMeasure()</code> method should calculate a
    measurement width and height which will be required to render the
    component. It should try to stay within the specifications passed in,
    although it can choose to exceed them (in this case, the parent can
    choose what to do, including clipping, scrolling, throwing an exception, 
    or asking the <code>onMeasure()</code> to try again, perhaps with
    different measurement specifications).
  <br>
	组件的方法必须计算一个用以安排组件的 测量宽 和 测量高 
	。计算的测量宽和高应该在传入的宽高测量规格之内，但是也可超出规格（这种情况下父会决定如何处理，可能是裁剪，变成滚动条，抛出异常，或者要求onMeasure（）再试一次，也许会传入不同规格）。</li>
  <li>
    Once the width and height are calculated, the <code>setMeasuredDimension(int
    width, int height)</code> method must be called with the calculated
    measurements. Failure to do this will result in an exception being
    thrown.
  <br>
	一旦宽和高计算出来，您必须调用<code>setMeasuredDimension(int
    width, int height)</code>方法传入计算出来的值。如果没有调用，会抛出异常。</li>
</ol>

<p>
Here's a summary of some of the other standard methods that the framework calls on views:
<br>
下面是其他一些会被系统调用的View的标准方法的总结：</p>
<table border="2" width="85%" align="center" cellpadding="5">
       <thead>
           <tr><th>Category——类别</th> <th>Methods——方法</th> <th>Description——描述</th></tr>
       </thead>
       
       <tbody>
       <tr>
           <td rowspan="2">Creation<br>
			创建</td>
           <td>Constructors<br>
			构造方法</td>
           <td>There is a form of the constructor that are called when the view
           is created from code and a form that is called when the view is
           inflated from a layout file. The second form should parse and apply
           any attributes defined in the layout file.
           <br>
			这个方法就是构造方法的形式，在可视框从代码创建的时候或从布局文件解析时被调用。第二种形式要解析和应用布局文件中的所有参数。</td>
       </tr>
       <tr>
           <td><code><code><a href="../../../reference/android/view/View.html#onFinishInflate()">onFinishInflate()</a></code></code></td>
           <td>Called after a view and all of its children has been inflated
           from XML.</td>
       </tr>
       
       <tr>
           <td rowspan="3">Layout</td>
           <td><code><code><a href="../../../reference/android/view/View.html#onMeasure(int, int)">onMeasure(int, int)</a></code></code></td>
           <td>Called to determine the size requirements for this view and all
           of its children.
           </td>
       </tr>
       <tr>
           <td><code><code><a href="../../../reference/android/view/View.html#onLayout(boolean, int, int, int, int)">onLayout(boolean, int, int, int, int)</a></code></code></td>
           <td>Called when this view should assign a size and position to all
           of its children.
           </td>
       </tr>
       <tr>
           <td><code><code><a href="../../../reference/android/view/View.html#onSizeChanged(int, int, int, int)">onSizeChanged(int, int, int, int)</a></code></code></td>
           <td>Called when the size of this view has changed.
           </td>
       </tr>
       
       <tr>
           <td>Drawing</td>
           <td><code><code><a href="../../../reference/android/view/View.html#onDraw(android.graphics.Canvas)">onDraw(Canvas)</a></code></code></td>
           <td>Called when the view should render its content.
           </td>
       </tr>
  
       <tr>
           <td rowspan="4">Event processing</td>
           <td><code><code><a href="../../../reference/android/view/View.html#onKeyDown(int, android.view.KeyEvent)">onKeyDown(int, KeyEvent)</a></code></code></td>
           <td>Called when a new key event occurs.
           </td>
       </tr>
       <tr>
           <td><code><code><a href="../../../reference/android/view/View.html#onKeyUp(int, android.view.KeyEvent)">onKeyUp(int, KeyEvent)</a></code></code></td>
           <td>Called when a key up event occurs.
           </td>
       </tr>   
       <tr>
           <td><code><code><a href="../../../reference/android/view/View.html#onTrackballEvent(android.view.MotionEvent)">onTrackballEvent(MotionEvent)</a></code></code></td>
           <td>Called when a trackball motion event occurs.
           </td>
       </tr>  
       <tr>
           <td><code><code><a href="../../../reference/android/view/View.html#onTouchEvent(android.view.MotionEvent)">onTouchEvent(MotionEvent)</a></code></code></td>
           <td>Called when a touch screen motion event occurs.
           </td>
       </tr>  
       
       <tr>
           <td rowspan="2">Focus</td>
           <td><code><code><a href="../../../reference/android/view/View.html#onFocusChanged(boolean, int, android.graphics.Rect)">onFocusChanged(boolean, int, Rect)</a></code></code></td>
           <td>Called when the view gains or loses focus.
           </td>
       </tr>
       
       <tr>
           <td><code><code><a href="../../../reference/android/view/View.html#onWindowFocusChanged(boolean)">onWindowFocusChanged(boolean)</a></code></code></td>
           <td>Called when the window containing the view gains or loses focus.
           </td>
       </tr>
       
       <tr>
           <td rowspan="3">Attaching</td>
           <td><code><code><a href="../../../reference/android/view/View.html#onAttachedToWindow()">onAttachedToWindow()</a></code></code></td>
           <td>Called when the view is attached to a window.
           </td>
       </tr>
  
       <tr>
           <td><code><code><a href="../../../reference/android/view/View.html#onDetachedFromWindow()">onDetachedFromWindow()</a></code></code></td>
           <td>Called when the view is detached from its window.
           </td>
       </tr>     
  
       <tr>
           <td><code><code><a href="../../../reference/android/view/View.html#onWindowVisibilityChanged(int)">onWindowVisibilityChanged(int)</a></code></code></td>
           <td>Called when the visibility of the window containing the view
           has changed.
           </td>
       </tr>     
       </tbody>
       
   </table>



<h3 id="customexample">A Custom View Example——一个自定义组件的例子</h3>
<p>The CustomView sample in the 
<a href="../../../guide/samples/ApiDemos/index.html">API Demos</a> provides an example
of a customized View. The custom View is defined in the
<a href="../../../guide/samples/ApiDemos/src/com/example/android/apis/view/LabelView.html">LabelView</a>
class.<br>
在&nbsp; 
<a href="../../../guide/samples/ApiDemos/index.html">API Demos</a> 
中的CustomView提供了以一个自定义组件的例子，这个自定义组件在 
<a href="../../../guide/samples/ApiDemos/src/com/example/android/apis/view/LabelView.html">LabelView</a>
类中定义。</p>
<p>The LabelView sample demonstrates a number of different aspects of custom components:<br>
LabelView例子涉及到了自定义组件的方方面面：</p>
<ul>
  <li>Extending the View class for a completely custom component.<br>
	首先继承View类。</li>
  <li>Parameterized constructor that takes the view inflation parameters
  (parameters defined in the XML). Some of these are passed through to the
  View superclass, but more importantly, there are some custom attributes defined
  and used for LabelView.<br>
	编写带参数的构造函数（参数可以来源于XML文件）。这里面的一些处理都已经在View父类中完成，但是任然有些Labelview使用的自定义组件特有的新的参数需要处理。</li>
  <li>Standard public methods of the type you would expect to see for a label
  component, for example <code>setText()</code>, <code>setTextSize()</code>,
  <code>setTextColor()</code> and so on.<br>
	一些标准的Public函数，例如<code>setText()</code>, <code>setTextSize()</code>,
  <code>setTextColor()</code></li>
  <li>An overridden <code>onMeasure</code> method to determine and set the
  rendering size of the component. (Note that in LabelView, the real work is done
  by a private <code>measureWidth()</code> method.)<br>
	重载<code>onMeasure</code>方法来确定组件的尺寸（注意：在LabelView中是通过一个私有函数<code>measureWidth()</code>来实现的）</li>
  <li>An overridden <code>onDraw()</code> method to draw the label onto the
  provided canvas.<br>
	重载<code>onDraw()</code>函数把Lable显示在提供的canvas上。</li>
</ul>
<p>You can see some sample usages of the LabelView custom View in
<a href="../../../guide/samples/ApiDemos/res/layout/custom_view_1.html">
custom_view_1.xml</a>
from the samples. In particular, you can see a mix of both <code>android:</code>
namespace parameters and custom <code>app:</code> namespace parameters. These
<code>app:</code> parameters are the custom ones that the LabelView recognizes
and works with, and are defined in a styleable inner class inside of the
samples R resources definition class.<br>
在例子中，你可以通过
<a href="../../../guide/samples/ApiDemos/res/layout/custom_view_1.html">
custom_view_1.xml</a>
看到自定义组件LabelView的用法。在XML文件中特别要注意的是<code>android:</code>和自定义的<code>app:</code>两个名称空间参数的混合运用，<code>app:</code>参数表示应用程序中被认为是LabelView组件的个体，这些也会作为资源在R类中定义。</p>


<h2 id="compound">Compound Controls
——组件组合</h2>
<p>If you don't want to create a completely customized component, but instead
are looking to put together a reusable component that consists of a group of
existing controls, then creating a Compound Component (or Compound Control) might
fit the bill. In a nutshell, this brings together a number of more atomic
controls (or views) into a logical group of items that can be treated as a
single thing. For example, a Combo Box can be thought of as a
combination of a single line EditText field and an adjacent button with an attached
 PopupList. If you press the button and select
something from the list, it populates the EditText field, but the user can
also type something directly into the EditText if they prefer.<br>
如果你不想创建一个完全自定义的组件，而是由几个现有组件的组合产生的新的组件，那么混合组件技术就更加适合。简单的来说，这样把几个现有的组件融合到一个逻辑组合里面可以封装成一个新的组件。例如，一个Combo 
Box组件可以看作是是一个EditText和一个带有弹出列表的Button组件的混合体。如果你点击按钮然后从列表中选择一项，他会弹出编辑框但是用户如果喜欢的话也可以直接在编辑框中输入。</p>
<p>In Android, there are actually two other Views readily available to do
this: <code><a href="../../../reference/android/widget/Spinner.html">Spinner</a></code> and 
<code><a href="../../../reference/android/widget/AutoCompleteTextView.html">AutoCompleteTextView</a></code>, but 
regardless, the concept of a Combo Box makes an easy-to-understand 
example.<br>
在Android中，其实还有其他的两个View类可以做到类似的效果： <code><a href="../../../reference/android/widget/Spinner.html">
Spinner</a></code> 和<code><a href="../../../reference/android/widget/AutoCompleteTextView.html">AutoCompleteTextView</a> </code>
，但是Combo Box作为一个例子更容易让人理解。</p>
<p>To create a compound component:<br>
下面简单的介绍如何创建组合组件：</p>
<ol>
  <li>
    The usual starting point is a Layout of some kind, so create a class
    that extends a Layout. Perhaps in the case of a Combo box we might use
    a LinearLayout with horizontal orientation. Remember that other layouts
    can be nested inside, so the compound component can be arbitrarily
    complex and structured. Note that just like with an Activity, you can
    use either the declarative (XML-based) approach to creating the
    contained components, or you can nest them programmatically from your
    code.
  <br>
	一般从Layout类开始，创建一个Layout类的派生类。也许在Combo 
	box我们会选择水平方向的LinearLayout作为父类。记住，其他的Layout类是可以嵌套到里面的，因此混合组件可以是任何组件的混合。注意，正如Activity一样，你既可以使用外部XML文件来声明你的组件，也可以嵌套在代码中。</li>
  <li>
    In the constructor for the new class, take whatever parameters the
    superclass expects, and pass them through to the superclass constructor
    first. Then you can set up the other views to use within your new
    component; this is where you would create the EditText field and the
    PopupList. Note that you also might introduce your own attributes and
    parameters into the XML that can be pulled out and used by your
    constructor.
  <br>
	在新的混合组件的构造函数中，首先，调用所有的父类的构造函数，传入对应的参数。然后可以设置你的混合组件的其他的一些方面，在哪创建EditText组件，又在哪创建PopupList组件。注意：你同时也可以在XML文件中引入一些自己的属性和参数，这些属性和参数也可以被你的混合组件所使用。</li>
  <li>
    You can also create listeners for events that your contained views might
    generate, for example, a listener method for the List Item Click Listener
    to update the contents of the EditText if a list selection is made.
  <br>
	你也可以创建时间监听器去监听新组件中View类触发的事件，例如，对List选项单击事件的监听，你必须在此时间发生后更新你EditText的值。</li>
  <li>
    You might also create your own properties with accessors and modifiers,
    for example, allow the EditText value to be set initially in the
    component and query for its contents when needed.
  <br>
	你可能创建自己的一些属性，带有访问和修改方法。例如，允许设置EditText初始值并且提供访问它的方法。</li>
  <li>
    In the case of extending a Layout, you don't need to override the
    <code>onDraw()</code> and <code>onMeasure()</code> methods since the
    layout will have default behavior that will likely work just fine. However, 
    you can still override them if you need to.
  <br>
	在Layout的派生类中，你没有必要去重载<code>onDraw()</code>和<code>onMeasure(</code>方法，因为Layout会有比较好的默认处理。但是，如果你觉得有必要你也可以重载它。</li>
  <li>
    You might override other <code>on...</code> methods, like
    <code>onKeyDown()</code>, to perhaps choose certain default values from
    the popup list of a combo box when a certain key is pressed.
  <br>
	你也可能重载一些on系列函数，例如通过
    <code>onKeyDown()</code>的重载，你可以通过按某个键去选择列表中的对应的值。</li>
</ol>
<p>
 To summarize, the use of a Layout as the basis for a Custom Control has a
number of advantages, including:<br>
	总之，把Layout类作为基类有下面几个优点：</p>
 
<ul>
  <li>
    You can specify the layout using the declarative XML files just like
    with an activity screen, or you can create views programmatically and
    nest them into the layout from your code.
  <br>
	正如activity一样，你也可以通过XML文件去声明你的新组件，或者你也可以在代码中嵌套。</li>
  <li>
    The <code>onDraw()</code> and <code>onMeasure()</code> methods (plus
    most of the other <code>on...</code> methods) will likely have suitable behavior so
    you don't have to override them.
  <br>
	<code>onDraw()</code>函数和<code>onMeasure()</code>函数是没有必要重载的，两个函数已经做得很好了。</li>
  <li>
    In the end, you can very quickly construct arbitrarily complex compound
    views and re-use them as if they were a single component.
  <br>
	你可以很快的创建你的混合组件，并且可以像单一组件那样使用。</li>
</ul>
<h4>Examples of Compound Controls——混合组件的例子</h4>
<p>In the API Demos project
 that comes with the SDK, there are two List
 examples &mdash; Example 4 and Example 6 under Views/Lists demonstrate a
 SpeechView which extends LinearLayout to make a component for displaying
 Speech quotes. The corresponding classes in the sample code are
 <code>List4.java</code> and <code>List6.java</code>.<br>
在API Demos工程中，有两个List类的例子——Example 4和Example 
6，里面的SpeechView组件是从LinearLayout类派生过来，实现显示演讲显示功能，对应的原代码是<code>List4.java</code>和<code>List6.java</code>。</p>
 


<h2 id="modifying">Modifying an Existing View Type——调整现有组件</h2>
<p>There is an even easier option for creating a custom View which is
useful in certain circumstances. If there is a component that is already very
similar to what you want, you can simply extend that component and just
override the behavior that you want to change. You can do all of the things
you would do with a fully customized component, but by starting with a more
specialized class in the View heirarchy, you can also get a lot of behavior for
free that probably does exactly what you want.<br>
在某些情况下，你可能有更简单的方法去创建你的组件。如果你应经有了一个非常类似的组件，你所要做的只是简单的从这个组件派生出你的组件，重在其中一些有必要修改的方法。通过完全自定义组件的方法你也可以同样的实现，但通过冲View派生产生新的组件，你可以简单获取一些已经存在的处理机制，这些很可能是你所想要的，而没有必要从头开始。</p>
<p>For example, the SDK includes a <a
href="../../../guide/samples/NotePad/index.html">NotePad application</a> in the
samples. This demonstrates many aspects of using the Android platform, among
them is extending an EditText View to make a lined notepad. This is not a
perfect example, and the APIs for doing this might change from this early
preview, but it does demonstrate the principles.<br>
例如，在SDK中有一个<a
href="../../../guide/samples/NotePad/index.html">NotePad application</a>例子。该例子演示了很多Android平台实用的细节，例如你会学到从EditView派生出能够自动换行的记事本。这还不是一个完美的例子，因为相比早期的版本来说，这些API已经感变了很多，但它确实说明了一些问题。</p>
<p>If you haven't done so already, import the 
NotePad sample into Eclipse (or
just look at the source using the link provided). In particular look at the definition of
<code>MyEditText</code> in the <a
href="../../../guide/samples/NotePad/src/com/example/android/notepad/NoteEditor.html">NoteEditor.java</a>
file.<br>
如果你还未查看该程序，现在你就可以在Eclipse中导入记事本例程（或仅通过提供的链接查看相应的源代码）。特别是查看<a
href="../../../guide/samples/NotePad/src/com/example/android/notepad/NoteEditor.html">NoteEditor.java</a>
中的<code>MyEditText</code>的定义。</p>
<p>Some points to note here<br>
下面有几点要注意的地方：</p>
<ol>
  <li>
    <strong>The Definition</strong>
    ——声明<p>The class is defined with the following line:<br>
	这个类是通过下面一行代码来定义的：<br/>
     <code>public static class MyEditText extends EditText</code></p>
     
    <ul>
      <li>
        It is defined as an inner class within the <code>NoteEditor</code>
        activity, but it is public so that it could be accessed as
        <code>NoteEditor.MyEditText</code> from outside of the <code>NoteEditor</code>
        class if desired.
      <br>
		它是定义在<code>NoteEditor</code>
        activity类里面的，但是它是共有的（public），因此如果有必要，它可以通过<code>NoteEditor.MyEditText</code>从<code>NoteEditor</code>外面来调用。</li>
      <li>
        It is <code>static</code>, meaning it does not generate the so-called
        "synthetic methods" that allow it to access data from the parent
        class, which in turn means that it really behaves as a separate
        class rather than something strongly related to <code>NoteEditor</code>.
        This is a cleaner way to create inner classes if they do not need
        access to state from the outer class, keeps the generated class
        small, and allows it to be used easily from other classes.
      <br>
		它是&nbsp;<code>static</code>类（静态类），意味着不会出现所谓的通过父类访问数据的“虚态方法”， 
		这样就使该类成为一个可以不严重依赖<code>NoteEditor</code>的单独类。对于不需要从外部类访问的内联类的创建，这是一个很清晰地思路，保证所产生的类很小，并且允许它可以被其他的类方便的调用。</li>
      <li>
        It extends <code>EditText</code>, which is the View we have chosen to
        customize in this case. When we are finished, the new class will be
        able to substitute for a normal <code>EditText</code> view.
      <br>
		它是<code>EditText</code>类的子类，它是我们选择的用来自定义的父类。当我们完成以后，新的类就可以作为一个普通的<code>EditText</code>来使用</li>
    </ul>
  </li>
  <li>
    <strong>Class Initialization——类的初始化</strong><p>As always, the super is called first. Furthermore, 
    this is not a default constructor, but a parameterized one. The
    EditText is created with these parameters when it is inflated from an
    XML layout file, thus, our constructor needs to both take them and pass them
    to the superclass constructor as well.<br>
	一般来说，父类是首先调用的。进一步来说，这不是一个默认的构造函数，而是一个带参数的构造函数。因为EditText是使用从XML布局文件提取出来的参数进行创建，因此我们的构造函数也要取出参数并且将这些参数传递给父类。</p>
  </li>
  <li>
    <strong>Overridden Methods——方法重载</strong><p>In this example, there is only one method to be overridden: 
    <code>onDraw()</code> &mdash; but there could easily be others needed when you
    create your own custom components.<br>
	在本例中，仅对<code>onDraw()</code>一个方法进行重载。但你可以很容易地为你的定制组件重载其他需要的方法。</p>
    <p>For the NotePad sample, overriding the <code>onDraw()</code> method allows
    us to paint the blue lines on the <code>EditText</code> view canvas (the
    canvas is passed into the overridden <code>onDraw()</code> method). The
    super.onDraw() method is called before the method ends. The
    superclass method should be invoked, but in this case, we do it at the
    end after we have painted the lines we want to include.<br>
	对于记事本例子来说，通过重载<code>onDraw()</code>方法我们可以在<code>EditText</code> 
	的画布（canvas）上绘制蓝色的线条（canvas类是通过重写的onDraw()方法传递）。该函数快要结束时要调用super.onDraw()函数。父类的方法是应该调用，但是在这个例子里面，我们是在我们划好了蓝线之后调用的。</p>
  <li>
    <strong>Use the Custom Component——使用自定义组件</strong><p>We now have our custom component, but how can we use it? In the
    NotePad example, the custom component is used directly from the
    declarative layout, so take a look at <code>note_editor.xml</code> in the
    <code>res/layout</code> folder.<br>
	现在，我们已经有自己定制的组件了，但是应该怎样使用它呢？在记事本例子中，定制的组件直接在预定义的布局文件中使用，让我们看一看<code>res/layout</code>目录中的<code>note_editor.xml</code>文件。</p>
<pre>
&lt;view
  class=&quot;com.android.notepad.NoteEditor$MyEditText&quot; 
  id=&quot;&#64;+id/note&quot;
  android:layout_width=&quot;fill_parent&quot;
  android:layout_height=&quot;fill_parent&quot;
  android:background=&quot;&#64;android:drawable/empty&quot;
  android:padding=&quot;10dip&quot;
  android:scrollbars=&quot;vertical&quot;
  android:fadingEdge=&quot;vertical&quot; /&gt;
</pre>
     
    <ul>
      <li>
        The custom component is created as a generic view in the XML, and
        the class is specified using the full package. Note also that the
        inner class we defined is referenced using the
        <code>NoteEditor$MyEditText</code> notation which is a standard way to
        refer to inner classes in the Java programming language.
        <br>
		该自定义组件在XML中是作为一个一般的View类来创建的，并且是通过全路径包来描述的。注意这里内联类是通过<code>NoteEditor$MyEditText</code>来表示的，这是Java编程中引用内部类的标准方法。<p>If your custom View component is not defined as an inner class, then you can,
        alternatively, declare the View component 
        with the XML element name, and exclude the <code>class</code> attribute. For example:<br>
		如果您的自定义组件不是定义在了内部类中，那么还您可以使用XML元素名称声明组件，然后包含进<code>class</code>参数，例如：</p>
<pre>
&lt;com.android.notepad.MyEditText
  id=&quot;&#64;+id/note&quot;
  ... />
</pre>
      <p>Notice that the <code>MyEditText</code> class is now a separate class file. When the class
      is nested in the <code>NoteEditor</code> class, this technique will not work.<br>
		注意<code>MyEditText</code>类现在在一个单独的类文件。当类嵌套在<code>NoteEditor</code>类中时，不能用这种方法。</p>
      </li>
      <li>
        The other attributes and parameters in the definition are the ones
        passed into the custom component constructor, and then passed
        through to the EditText constructor, so they are the same
        parameters that you would use for an EditText view. Note that it is
        possible to add your own parameters as well, and we will touch on
        this again below.
      <br>
		在定义中的其他属性和参数将传递给定制组件的构造函数，然后才传到EditText构造函数中，因此这些参数也是你使用EditText组件的参数。注意，这里你也可以增加你自己的参数，我们将在下面讨论这个问题。</li>
    </ul>
  </li>
</ol>
<p>And that's all there is to it. Admittedly this is a simple case, but
that's the point &mdash; creating custom components is only as complicated as you
need it to be.<br>
这就是你全部需要做的，诚然这是一个简单的例子。但问题的关键是：你的需求有多复杂，那么你的自定义组件就有多么复杂。</p>
<p>A more sophisticated component may override even more <code>on...</code> methods and
introduce some of its own helper methods, substantially customizing its properties and
behavior. The only limit is your imagination and what you need the component to
do.<br>
一个更为复杂的组件可能需要重载更多的<code>on...</code>系列函数，并且还要很多特有的函数来充分实现自定义组件的功能。唯一的限制就是你的想象力和你需要组件去执行什么工作。</p>


    </div>

  <a href="#top" style="float:right">&uarr; Go to top</a>
  
    <p><a href="index.html">&larr; Back to User Interface</a></p>
  
  </div>

<div id="footer">


  <div id="copyright">
    
  Except as noted, this content is licensed under <a
  href="http://www.apache.org/licenses/LICENSE-2.0">Apache 2.0</a>. 
  For details and restrictions, see the <a href="../../../license.html">
  Content License</a>.
  </div>
  <div id="build_info">
    
  Android 2.0.1&nbsp;r1 - 24 Nov 2009 18:21

  </div>

  <div id="footerlinks">
    
  <p>
    <a href="http://www.android.com/terms.html">Site Terms of Service</a> -
    <a href="http://www.android.com/privacy.html">Privacy Policy</a> -
    <a href="http://www.android.com/branding.html">Brand Guidelines</a>
  </p>
  </div>

</div> <!-- end footer -->

</div><!-- end doc-content -->

</div> <!-- end body-content --> 

<script type="text/javascript">
init(); /* initialize android-developer-docs.js */
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
var pageTracker = _gat._getTracker("UA-5831155-1");
pageTracker._trackPageview();
</script>

</body>
</html>



